syntax = "proto3";

package deploymonkey;

import "golang.conradwood.net/autodeployer/proto/autodeployer.proto";
import "google/api/annotations.proto";

// the normal, intended flow is like so:
// 1. the deploymonkey is configured with a group of applications,
//    in its simplest form it's a single application
// 2. each build calls UpdateApp with the buildid of the new build
// 3. -> goto 2


message ApplicationDefinition {
 string DownloadURL=1;
 string DownloadUser=2;
 string DownloadPassword=3;
 string Binary=4;
 repeated string Args=5;
 string Repository=6;
 uint64 BuildID=7;
 uint32 Instances=8;
 string DeploymentID=9;
 repeated autodeployer.AutoRegistration AutoRegs=10;
 repeated string Machines=11;
}

// a group consists of one or more applications
// and a key (chosen by the creator)
// if a group with a given key is redefined, all previous
// instances of software in this group will be shutdown
// any group can only have one application of a given repository
// in its group
message GroupDefinitionRequest {
 string Namespace=1;
 string GroupID=2;
 // if we set a group as 'protected', then the deploymonkey
 // won't allow a user to update it unless the user has a special
 // authorisation. (To prevent accidental updates to 'live')
 bool Protected=3;
 repeated ApplicationDefinition Applications=4;
}

message UpdateAppRequest {
string GroupID=1;
string Namespace=2;
ApplicationDefinition app=3;
}


message EmptyResponse {}

enum GroupResponseStatus {
// attempt to define a group that exists just like that
NOCHANGE=0;
// change detected and accepted
CHANGEACCEPTED=1;
// change detected but not accepted (permissions? protected group?)
CHANGEREJECTED=2;
}
message GroupDefResponse {
repeated string Advice=1;
string VersionID=2;
GroupResponseStatus Result=3;
}

message DeployRequest {
string VersionID=1;
}

message DeployResponse {
}

message GetNameSpaceRequest {}
message GetNameSpaceResponse {
repeated string NameSpaces = 1;
}

message GetGroupsRequest {
string NameSpace=1;
}

message GroupDef {
string GroupID=1;
string NameSpace=2;
int64 DeployedVersion=3;
int64 PendingVersion=4;
}
message GetGroupsResponse {
repeated GroupDef Groups=1;
}
message GetAppsRequest {
string NameSpace=1;
string GroupName=2; 
}
message GetAppsResponse {
repeated ApplicationDefinition Applications=4;
}
message UpdateRepoRequest {
string Namespace=1;
string GroupID=2;
string Repository=3;
uint64 BuildID=4;
}
service DeployMonkey {
rpc DefineGroup(GroupDefinitionRequest) returns (GroupDefResponse);
rpc DeployVersion(DeployRequest) returns (DeployResponse);
// update all apps in a repo in a group to a new buildid
rpc UpdateRepo(UpdateRepoRequest) returns (GroupDefResponse);
// update a single app to a new buildid
rpc UpdateApp(UpdateAppRequest) returns (GroupDefResponse);
rpc GetNameSpaces(GetNameSpaceRequest) returns (GetNameSpaceResponse);
rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse);
rpc GetApplications(GetAppsRequest) returns (GetAppsResponse);
}