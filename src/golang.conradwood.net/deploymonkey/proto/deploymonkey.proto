syntax = "proto3";

package deploymonkey;

import "google/api/annotations.proto";

// the normal, intended flow is like so:
// 1. the deploymonkey is configured with a group of applications,
//    in its simplest form it's a single application
// 2. each build calls UpdateApp with the buildid of the new build
// 3. -> goto 2


message ApplicationDefinition {
 string DownloadURL=1;
 string DownloadUser=2;
 string DownloadPassword=3;
 string Binary=4;
 repeated string Args=5;
 string Repository=6;
 uint64 BuildID=7;
 uint32 Instances=8;
}

// a group consists of one or more applications
// and a key (chosen by the creator)
// if a group with a given key is redefined, all previous
// instances of software in this group will be shutdown
// any group can only have one application of a given repository
// in its group
message GroupDefinitionRequest {
 string Namespace=1;
 string GroupID=2;
 repeated ApplicationDefinition Applications=3;
}

message UpdateAppRequest {
string GroupID=1;
string Repository=2;
uint64 BuildID=8;
}


message EmptyResponse {}

enum GroupResponseStatus {
// attempt to define a group that exists just like that
NOCHANGE=0;
// change detected and accepted
CHANGEACCEPTED=1;
// change detected but not accepted (permissions? protected group?)
CHANGEREJECTED=2;
}
message GroupDefResponse {
repeated string Advice=1;
repeated string DefID=2;

}

service DeployMonkey {
rpc DefineGroup(GroupDefinitionRequest) returns (GroupDefResponse);
rpc UpdateApp(UpdateAppRequest) returns (EmptyResponse);
}