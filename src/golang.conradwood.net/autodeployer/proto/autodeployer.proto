
syntax = "proto3";

package autodeployer;

import "google/api/annotations.proto";

message AutoRegistration {
 string portdef=1;
 string ServiceName=2;
 // comma delimited list of apitypes
 string ApiTypes=3;
}

message DeployRequest {
 string DownloadURL=1;
 string DownloadUser=2;
 string DownloadPassword=3;
 string Binary=4;
 repeated string Args=5;
 string Repository=6;
 uint64 BuildID=7;
 // an opaque id -> will be also returned in InfoResponse
 string DeploymentID=8;
 string Namespace=9;
 string Groupname=10;
 repeated AutoRegistration AutoRegistration=11;
}
enum DeploymentStatus {
// nothing happened yet
 PREPARING=0;
 // forked, exec'ed, waiting for startup message
 STARTING=1;
 // downloading binaries
 DOWNLOADING=2;
 // gathering resources (e.g. ports)
 RESOURCING=3;
 // startup message done, handed control to application
 EXECUSER=4;
 TERMINATED=5;
}

message DeployResponse {
// did it succeed in starting and running?
bool Success=1;
// does it remain running (might be a very shortlived application)
bool Running=2;
// any messages?
string Message=3;
// the local ports chosen for the application
repeated uint32 Ports=4;
// the user this application runs as
string userid=5;
}

message EmptyResponse{}
message TerminationRequest {
string Msgid=1;
bool Failed=2;
}
message StartedRequest {
string Msgid=1;
}
message StartupRequest {
string Msgid=1;
}

message StartupResponse {
string URL=1;
 string DownloadUser=2;
 string DownloadPassword=3;
string Binary=4;
repeated string Args=5;
string WorkingDir=6;
}

message ResourceRequest {
string Msgid=1;
int32 Ports=2;
}
message ResourceResponse {
repeated int32 Ports=1;
}
message InfoRequest{}

message DeployedApp {
string ID=1;
DeployRequest Deployment=2;
}
message InfoResponse {
repeated DeployedApp Apps=1;
}

message UndeployRequest{
string ID=1;
bool Block=2;
}
message UndeployResponse{}

message MachineInfoRequest{}
message MachineInfoResponse {
string MachineGroup=1;
}

service AutoDeployer {
// deploy an application
rpc Deploy(DeployRequest) returns (DeployResponse);
rpc Undeploy(UndeployRequest) returns (UndeployResponse);

// once we re-executed ourselves, we send this message to our selves
rpc InternalStartup(StartupRequest) returns (StartupResponse);
rpc AllocResources(ResourceRequest) returns (ResourceResponse);
rpc Terminated(TerminationRequest) returns (EmptyResponse);
rpc Started(StartedRequest) returns (EmptyResponse);
// what's running??
rpc GetDeployments(InfoRequest) returns (InfoResponse);
// what kind of machine are we running on?
// name/speed/ram/bla
rpc GetMachineInfo(MachineInfoRequest) returns (MachineInfoResponse);
}