// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slackgateway/slackgateway.proto

/*
Package slackgateway is a generated protocol buffer package.

It is generated from these files:
	slackgateway/slackgateway.proto

It has these top-level messages:
	PublishMessageRequest
	EmptyResponse
*/
package slackgateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishMessageRequest struct {
	OriginService string `protobuf:"bytes,1,opt,name=OriginService" json:"OriginService,omitempty"`
	Channel       string `protobuf:"bytes,2,opt,name=Channel" json:"Channel,omitempty"`
	Test          string `protobuf:"bytes,3,opt,name=Test" json:"Test,omitempty"`
}

func (m *PublishMessageRequest) Reset()                    { *m = PublishMessageRequest{} }
func (m *PublishMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishMessageRequest) ProtoMessage()               {}
func (*PublishMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishMessageRequest) GetOriginService() string {
	if m != nil {
		return m.OriginService
	}
	return ""
}

func (m *PublishMessageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PublishMessageRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PublishMessageRequest)(nil), "slackgateway.PublishMessageRequest")
	proto.RegisterType((*EmptyResponse)(nil), "slackgateway.EmptyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SlackGateway service

type SlackGatewayClient interface {
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type slackGatewayClient struct {
	cc *grpc.ClientConn
}

func NewSlackGatewayClient(cc *grpc.ClientConn) SlackGatewayClient {
	return &slackGatewayClient{cc}
}

func (c *slackGatewayClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/slackgateway.SlackGateway/PublishMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SlackGateway service

type SlackGatewayServer interface {
	PublishMessage(context.Context, *PublishMessageRequest) (*EmptyResponse, error)
}

func RegisterSlackGatewayServer(s *grpc.Server, srv SlackGatewayServer) {
	s.RegisterService(&_SlackGateway_serviceDesc, srv)
}

func _SlackGateway_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackGatewayServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slackgateway.SlackGateway/PublishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackGatewayServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlackGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slackgateway.SlackGateway",
	HandlerType: (*SlackGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _SlackGateway_PublishMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slackgateway/slackgateway.proto",
}

func init() { proto.RegisterFile("slackgateway/slackgateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xce, 0x49, 0x4c,
	0xce, 0x4e, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x47, 0xe6, 0xe8, 0x15, 0x14, 0xe5, 0x97,
	0xe4, 0x0b, 0xf1, 0x20, 0x8b, 0x29, 0x65, 0x73, 0x89, 0x06, 0x94, 0x26, 0xe5, 0x64, 0x16, 0x67,
	0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xa9,
	0x70, 0xf1, 0xfa, 0x17, 0x65, 0xa6, 0x67, 0xe6, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xa1, 0x0a, 0x0a, 0x49, 0x70, 0xb1, 0x3b, 0x67, 0x24, 0xe6,
	0xe5, 0xa5, 0xe6, 0x48, 0x30, 0x81, 0xe5, 0x61, 0x5c, 0x21, 0x21, 0x2e, 0x96, 0x90, 0xd4, 0xe2,
	0x12, 0x09, 0x66, 0xb0, 0x30, 0x98, 0xad, 0xc4, 0xcf, 0xc5, 0xeb, 0x9a, 0x5b, 0x50, 0x52, 0x19,
	0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x6a, 0x94, 0xc4, 0xc5, 0x13, 0x0c, 0x72, 0x8d, 0x3b,
	0xc4, 0x35, 0x42, 0x41, 0x5c, 0x7c, 0xa8, 0xae, 0x11, 0x52, 0xd6, 0x43, 0xf1, 0x02, 0x56, 0xb7,
	0x4a, 0x49, 0xa3, 0x2a, 0x42, 0xb1, 0x23, 0x89, 0x0d, 0xec, 0x6d, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xa6, 0xb4, 0x95, 0x19, 0x01, 0x00, 0x00,
}
